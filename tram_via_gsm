#include "main.h"
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <gsm.h>




#define PRINT_STR(msg) do  {\
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);\
} while(0)

/* select number of SPI and UART */

UART_HandleTypeDef  huart2;



/* STM32 INIT FUNCTIONCS*/
static void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

/* buffer to hold data transmitted via serial ** debugging purposes */
char msg2[60]; // usart2


int main(void)
{

	   	   	   	char* First_string = (char*) malloc(6 * sizeof(char));
		      	strcpy(First_string,"5000 \0");
		      	//PRINT_STR(First_string);
		      	//PRINT_STR("\r\n");

		      	char* ID = (char*) malloc(5 * sizeof(char));
		      	strcpy(ID,"ABCD\0");
		      	//PRINT_STR(ID);
		      	//PRINT_STR("\r\n");

		      	char* CID = (char*) malloc(3 * sizeof(char));
		      	strcpy(CID,"18\0");
		      	//PRINT_STR(CID);
		      	//PRINT_STR("\r\n");

		      	char* event_type = (char*) malloc(5 * sizeof(char));
		      	strcpy(event_type,"1101\0");
		      	//PRINT_STR(event_type);
		      	//PRINT_STR("\r\n");

		      	char* zone = (char*) malloc(3 * sizeof(char));
		      	strcpy(zone,"16\0");
		      	//PRINT_STR(zone);
		      	//PRINT_STR("\r\n");

		      	char* partition = (char*) malloc(4 * sizeof(char));
		      	strcpy(partition,"003\0");
		      	//PRINT_STR(partition);
		      	//PRINT_STR("\r\n");

		      	char* last_digit = (char*) malloc(3 * sizeof(char));
		      	strcpy(last_digit,"J\n\0");
		      	//PRINT_STR(last_digit);
		      	//PRINT_STR("\r\n");


		      	// construct tram here
		      	 char* tram = (char*) malloc(30 * sizeof(char));

				   strcpy(tram,'\0');

				   strcat(tram,First_string);
				   free(First_string);
				   strcat(tram,ID);
				   free(ID);
				   strcat(tram,CID);
				   free(CID);
				   strcat(tram,event_type);
				   free(event_type);

				   strcat(tram,zone);
					free(zone);

				   strcat(tram,partition);
					free(partition);

				   strcat(tram,last_digit);

					free(last_digit);




	     HAL_Init();

	     SystemClock_Config();

	  	 MX_GPIO_Init();

	  	 MX_USART2_UART_Init();



	  	 PRINT_STR("AT+CMGF=1\r\n");
	  	 HAL_Delay(1000);
	  	 PRINT_STR("AT+CMGS=\"+213676112985\"\r\n");
	  	 HAL_Delay(200);
	  	 PRINT_STR(tram);



	  	USART2->DR = 0x1A;

	  	HAL_Delay(3000);

	     while (1)
	  	  {
	  	  }


}

void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}
void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOC_CLK_ENABLE()
	;

	__GPIOA_CLK_ENABLE()
	;
	__GPIOB_CLK_ENABLE()
	;

	/* Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/* Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}


/* USART2 init function */
void MX_USART2_UART_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	huart2.Instance = USART2;
	huart2.Init.BaudRate = 115200;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;

    __USART2_CLK_ENABLE();
      /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	HAL_UART_Init(&huart2);
}


/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

/*
static void usart_transmit_string(char* data) {
	for (int i=0 ; data[i] != 0 ; i++) {
		 HAL_UART_Transmit(&huart1, data[i], sizeof(data[i]), HAL_MAX_DELAY);
	}
}
*/

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
